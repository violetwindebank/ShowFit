"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var nock = require("nock");
var chai_1 = require("chai");
var chaiAsPromised = require("chai-as-promised");
chai_1.use(chaiAsPromised);
var index_1 = require("../src/index");
// test settings
var testURL = 'https://api.testmail.app/api/graphql';
var testQuery = '{ ping }';
var testResponse = { ping: true };
var errorQuery = 'x';
var errorResponse = {
    errors: [{
            extensions: {
                code: 'GRAPHQL_PARSE_FAILED'
            },
            locations: [
                {
                    line: 1,
                    column: 1
                }
            ],
            message: "Syntax Error: Unexpected Name \"x\""
        }]
};
// tests
describe('test suite', function () {
    describe('basic tests', function () {
        before(function () {
            // ping queries
            nock('https://api.testmail.app')
                .persist()
                .post('/api/graphql', { query: testQuery })
                .reply(200, JSON.stringify({ data: testResponse }), {
                'Content-Type': 'application/json',
                'Server': 'cloudflare'
            });
            // error queries
            nock('https://api.testmail.app')
                .persist()
                .post('/api/graphql', { query: 'x' })
                .reply(200, JSON.stringify(errorResponse), {
                'Content-Type': 'application/json',
                'Server': 'cloudflare'
            });
        });
        after(function () {
            nock.cleanAll();
        });
        it('minimal query', function () {
            return chai_1.expect(index_1.request(testURL, testQuery)).to.eventually.deep.equal(testResponse);
        });
        it('minimal raw query with response headers', function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a, headers, result;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, index_1.rawRequest(testURL, testQuery)];
                        case 1:
                            _a = _b.sent(), headers = _a.headers, result = __rest(_a, ["headers"]);
                            chai_1.expect(result).to.deep.equal({ data: testResponse, status: 200 });
                            chai_1.expect(headers.get('content-type')).to.contain('application/json');
                            chai_1.expect(headers.get('server')).to.deep.equal('cloudflare');
                            return [2 /*return*/];
                    }
                });
            });
        });
        it('basic error', function () {
            return __awaiter(this, void 0, void 0, function () {
                var err, e_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, index_1.request(testURL, errorQuery)];
                        case 1:
                            _a.sent();
                            return [3 /*break*/, 3];
                        case 2:
                            e_1 = _a.sent();
                            err = e_1;
                            return [3 /*break*/, 3];
                        case 3:
                            chai_1.expect(err === null || err === void 0 ? void 0 : err.response.errors).to.deep.equal(errorResponse.errors);
                            return [2 /*return*/];
                    }
                });
            });
        });
    });
    describe('retry tests', function () {
        afterEach(function () {
            nock.cleanAll();
        });
        it('minimal query with 500 status and 0 retries', function () {
            nock('https://api.testmail.app')
                .persist()
                .post('/api/graphql')
                .reply(500, 'Internal Server Error');
            var client = new index_1.GraphQLClient(testURL, { retries: 0 });
            return chai_1.expect(client.request(testQuery)).to.eventually.be.rejectedWith();
        });
        it('minimal query with 502 status and 2 retries', function () {
            return __awaiter(this, void 0, void 0, function () {
                var client, err, startTimestamp, e_2;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.timeout(5000); // 5s
                            nock('https://api.testmail.app')
                                .persist()
                                .post('/api/graphql')
                                .reply(502, 'Internal Server Error');
                            client = new index_1.GraphQLClient(testURL, { retries: 2 });
                            startTimestamp = Date.now();
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, client.request(testQuery)];
                        case 2:
                            _a.sent();
                            return [3 /*break*/, 4];
                        case 3:
                            e_2 = _a.sent();
                            err = e_2;
                            return [3 /*break*/, 4];
                        case 4:
                            chai_1.expect(err === null || err === void 0 ? void 0 : err.response.status).to.equal(502);
                            // testing retry delay: 1s (retry 1) + 2s (retry 2) = 3s
                            chai_1.expect(Math.round((Date.now() - startTimestamp) / 1000)).to.equal(3);
                            return [2 /*return*/];
                    }
                });
            });
        });
        it('minimal query with network offline and 0 retries', function () {
            return __awaiter(this, void 0, void 0, function () {
                var client;
                return __generator(this, function (_a) {
                    client = new index_1.GraphQLClient(testURL, { retries: 0 });
                    nock.disableNetConnect();
                    return [2 /*return*/, chai_1.expect(client.request(testQuery)).to.eventually.be.rejectedWith()];
                });
            });
        });
        it('minimal query with network offline and default retries', function () {
            return __awaiter(this, void 0, void 0, function () {
                var client, startTimestamp, _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            this.timeout(5000); // 5s
                            client = new index_1.GraphQLClient(testURL);
                            nock.disableNetConnect();
                            startTimestamp = Date.now();
                            setTimeout(function () {
                                nock.enableNetConnect();
                            }, 2000); // after 2s
                            _a = chai_1.expect;
                            return [4 /*yield*/, client.request(testQuery)];
                        case 1:
                            _a.apply(void 0, [_b.sent()]).to.deep.equal(testResponse);
                            // it should have taken at least 2s (offline time)
                            chai_1.expect((Date.now() - startTimestamp) > 2000).to.equal(true);
                            return [2 /*return*/];
                    }
                });
            });
        });
    });
});
//# sourceMappingURL=index.test.js.map