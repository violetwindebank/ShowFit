export declare type Variables = {
    [key: string]: any;
};
export interface Headers {
    [key: string]: string;
}
declare type RequestDelayFunction = ((attempt: number, error: Error | null, response: Response | null) => number);
export interface Options extends RequestInit {
    retries?: number;
    retryDelay?: number | RequestDelayFunction;
    retryOn?: number[];
}
export interface GraphQLError {
    message: string;
    locations: {
        line: number;
        column: number;
    }[];
    path: string[];
}
export interface GraphQLResponse {
    data?: any;
    errors?: GraphQLError[];
    extensions?: any;
    status: number;
    [key: string]: any;
}
export interface GraphQLRequestContext {
    query: string;
    variables?: Variables;
}
export declare class ClientError extends Error {
    response: GraphQLResponse;
    request: GraphQLRequestContext;
    constructor(response: GraphQLResponse, request: GraphQLRequestContext);
    private static extractMessage;
}
export declare type RawResult<T> = {
    data?: T;
    extensions?: any;
    headers: Response['headers'];
    status: number;
    errors?: GraphQLError[];
};
export {};
